* When you want to use different variants of an algorithm within an object and be able to switch from one algorithm to another during runtime
* When you have a lot of similar classes that only differ in the way they execute some behavior
* Use the pattern to isolate the business logic of a class from the implementation details of algorithms that may not be as important in the context of that logic.
* Use the pattern when your class has a massive conditional statement that switches between different variants of the same algorithm.

* Can swap algorithms used inside an object at runtime.
* Can isolate the implementation details of an algorithm from the code that uses it
* Can replace inheritance with composition
* Open/Closed Principle. You can introduce new strategies without having to change the context
